def dfs(i): 
    # i는 현재까지 탐색한 행 인덱스

    global count
    if i == n: # i가 n과 같아지면 모든 퀸을 배치한 경우이다.
        count += 1
        return
    else:
        for j in range(n): # y행의 열들을 검사
            if row[j] or diag1[j + i] or diag2[j - i]: # i, j인덱스의 열, 대각선을 검사하여 퀸이 있으면
                continue # 그 다음 인덱스를 검사

            # 퀸을 놓을수 있는 인덱스 라면
            row[j] = diag1[j+i] = diag2[j-i] = 1 # row, diag들을 모두 체크
            dfs(i+1) # 현재 i에서는 더 이상 나올 수 없으므로 다음 행 탐색
            row[j] = diag1[j+i] = diag2[j-i] = 0 # row, diag들을 모두 체크 해제

n = int(input())

count = 0 # 가능한 해의 개수 저장

# 퀸은 각 행에 하나씩만 존재할 수 있다!!

row = [0 for _ in range(n)]
# 체스판 각 열에 대해 퀸이 배치되었는지를 나타내는 리스트
# row[j] 값이 0이면 해당 열에 퀸이 배치되어 있지 않으므로 (i, j)에 퀸을 배치할 수 있는 상태
# row[j] 값이 1이면 해당 열에 퀸이 배치되어 있으므로 (i, j)에 퀸을 배치할 수 있는 상태

# 퀸은 대각선에 하나씩만 존재할 수 있다!

diag1 = [0 for _ in range(2 * n - 1)]
# 체스판의 왼쪽 아래부터 오른쪽 위까지 올라가는 대각선들을 관리하는 리스트
# 2 * n - 1은 체스판의 왼쪽 아래부터 오른쪽 위까지 올라가는 대각선 방향의 개수
# diag1[j+i] 값이 0이면 (i, j) 인덱스에 퀸을 배치할 수 있는 상태, 1이면 이미 해당 대각선에 퀸이 배치 되어 있는 상태

diag2 = [0 for _ in range(2 * n - 1)]
# 왼쪽 위부터 오른쪽 아래까지 내려가는 대각선들을 관리하는 리스트
# 2 * n - 1은 체스판의 왼쪽 위부터 오른쪽 아래까지 내려가는 대각선 방향의 개수
# diag2[j-i] 값이 0이면 (i, j) 인덱스에 퀸을 배치할 수 있는 상태, 1이면 이미 해당 대각선에 퀸이 배치 되어 있는 상태

dfs(0) # i인덱스에 0을 전달

print(count)